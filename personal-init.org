* Personal initialization file
  This is an org file for customizing my emacs configuration but done so that it includes more prose commenting

** Basic customization
#+BEGIN_SRC emacs-lisp
 (load "server")
 (unless (server-running-p) (server-start))

 (setq inhibit-startup-message nil) ;; hide the startup message
 (global-linum-mode t) ;; enable line numbers globally
#+END_SRC
	
** Setup melpa package loads
#+BEGIN_SRC emacs-lisp
 (require 'package)

 (add-to-list 'package-archives
	'("melpa" . "https://melpa.org/packages/") t)

 (package-refresh-contents)
 (package-initialize)
 (when (not package-archive-contents)
   (package-refresh-contents))

 (defvar myPackages
   '(better-defaults
     ein
     elpy
     flycheck
     py-autopep8
     auto-complete))

 (mapc #'(lambda (package)
     (unless (package-installed-p package)
       (package-install package)))
       myPackages)
#+END_SRC

** Load and require elpomark-mode
#+BEGIN_SRC emacs-lisp
; (add-to-list 'load-path "/home/seeley/.emacs.d/elpomark/")
; (require 'elpomark-mode)
#+END_SRC

** Python configuration
#+BEGIN_SRC emacs-lisp
  (setenv "PATH" (concat (getenv "PATH") ":~/.local/bin/"))
  (setq exec-path (append exec-path '("~/.local/bin/")))
  (elpy-enable)

  ;; use flycheck not flymake with elpy
  (when (require 'flycheck nil t)
    (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
    (add-hook 'elpy-mode-hook 'flycheck-mode))

  (setq elpy-rpc-backend "jedi")
  (setq backup-directory-alist `(("." . "~/.emacs.d/.saves")))

  ;; enable autopep8 formatting on save
  (require 'py-autopep8)
  (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)
#+END_SRC

** Test area
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords 
	'((sequence "TODO" "STARTED" "CANCELED" "|" "DONE")))
  (setq org-todo-keyword-faces
	'(("TODO" . org-warning) ("STARTED" . "yellow")
	  ("CANCELED" . (:foreground "blue" :weight bold))))
#+END_SRC

** Hugo
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'ox
    (require 'ox-hugo))
#+END_SRC

** Javascript
#+BEGIN_SRC emacs-lisp
;(require 'js2-mode)
;(require 'auto-complete-config)
;(require 'ac-js2)

;(ac-config-default)
;(global-auto-complete-mode t)
;(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
;(add-to-list 'company-backends 'ac-js2-company)

;(add-hook 'js2-mode-hook 'ac-js2-mode)

#+END_SRC

#+RESULTS:
| ac-js2-mode |

** Custom Functions
   #+begin_src emacs-lisp
   (defun connect-bbq ()
     (interactive)
     (dired "/ssh:smpentecost@bbq.aio-net.com:/home/smpentecost"))
   #+end_src
** C Styling
   #+begin_src emacs-lisp
   (defun c-lineup-arglist-tabs-only (ignored)
     "Line up argument lists by tabs, not spaces"
     (let* ((anchor (c-langelem-pos c-syntactic-element))
	    (column (c-langelem-2nd-pos c-syntactic-element))
	    (offset (- (1+ column) anchor))
	    (steps (floor offset c-basic-offset)))
       (* (max steps 1)
	  c-basic-offset)))

   (add-hook 'c-mode-common-hook
	     (lambda ()
	       ;; Add kernel style
	       (c-add-style
		"linux-tabs-only"
		'("linux" (c-offsets-alist
			   (arglist-cont-nonempty
			    c-lineup-gcc-asm-reg
			    c-lineup-arglist-tabs-only))))))

   (add-hook 'c-mode-hook
	     (lambda ()
	       (let ((filename (buffer-file-name)))
		 ;; Enable kernel mode for the appropriate files
		 (when (and filename
			    (string-match (expand-file-name "~/src/linux-trees")
					  filename))
		   (setq indent-tabs-mode t)
		   (setq show-trailing-whitespace t)
		   (c-set-style "linux-tabs-only")))))
   #+end_src
   
